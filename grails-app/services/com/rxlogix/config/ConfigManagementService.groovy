package com.rxlogix.config

import com.rxlogix.UserService
import com.rxlogix.admin.AdminIntegrationApiService
import com.rxlogix.user.User
import com.rxlogix.util.DateUtil
import grails.gorm.transactions.Transactional
import grails.util.Holders
import org.apache.http.HttpStatus
import org.apache.poi.ss.usermodel.BorderStyle
import org.apache.poi.ss.usermodel.Cell
import org.apache.poi.ss.usermodel.FillPatternType
import org.apache.poi.ss.usermodel.IndexedColors
import org.apache.poi.ss.usermodel.Row
import org.apache.poi.ss.util.CellRangeAddress
import org.apache.poi.ss.util.RegionUtil
import org.apache.poi.xssf.usermodel.XSSFCellStyle
import org.apache.poi.xssf.usermodel.XSSFFont
import org.apache.poi.xssf.usermodel.XSSFSheet
import org.apache.poi.xssf.usermodel.XSSFWorkbook

@Transactional
class ConfigManagementService {
    AdminIntegrationApiService adminIntegrationApiService
    UserService userService
    static final String USER_HOME_DIR = System.properties.'user.home'

    void exportTechnicalConfiguration(XSSFWorkbook workbook) {
        String serverUrl = Holders.config.getProperty('pvadmin.api.url')
        String apiPath = Holders.config.getProperty('pvadmin.api.fetchTech.url')
        Map<String, String> queryParams = ["appName": "PVR"]
        Map<String, Object> response = adminIntegrationApiService.get(serverUrl, apiPath, queryParams)
        if (response.status == HttpStatus.SC_OK) {
            List<Object[]> techConfigData = response.data
            createExcelWorkBookForData(Holders.config.getProperty('tech.export.headerData', List), techConfigData, workbook);
        }
    }


    void createExcelWorkBookForData(List<String> headerData, List<Object[]> tableData, XSSFWorkbook workbook) throws IOException {
        log.info("EXCEL DATA EXPORTER STARTED FOR TECH CONFIG....")
        XSSFSheet sheet = workbook.createSheet("Technical Configurations")
        int rowNumber = 0
        int cellNumber = 0
        Row row = sheet.createRow(rowNumber++)
        for (String key : headerData) {
            sheet.setColumnWidth(cellNumber, 25 * 256)
            Cell cell = row.createCell(cellNumber++)
            cell.setCellValue(key)
            cell.setCellStyle(applyColumnHeaderStyle(workbook))
        }
        for (Object[] objectRow : tableData) {
            Row row1 = sheet.createRow(rowNumber++)
            row1.setHeight((short) 1000)
            for (int i = 1; i < objectRow.length; i++) {
                Cell cell = row1.createCell(i - 1)
                cell.setCellValue(objectRow[i] != null ? objectRow[i].toString() : "")
            }
        }
        CellRangeAddress region = new CellRangeAddress(1, sheet.getLastRowNum(), 0, (headerData.size() - 1))
        RegionUtil.setBorderTop(BorderStyle.THIN, region, sheet)
        RegionUtil.setBorderBottom(BorderStyle.THIN, region, sheet)
        RegionUtil.setBorderLeft(BorderStyle.THIN, region, sheet)
        RegionUtil.setBorderRight(BorderStyle.THIN, region, sheet)
        log.info("EXCEL DATA EXPORTER IS COMPLETE FOR TECH CONFIG.");
    }

    XSSFCellStyle applyColumnHeaderStyle(XSSFWorkbook workbook) {
        XSSFCellStyle style = (XSSFCellStyle) workbook.createCellStyle();
        XSSFFont font = (XSSFFont) workbook.createFont();
        font.setFontHeightInPoints((short) 10);
        font.setBold(true);
        style.setFont(font);
        style.setFillForegroundColor(IndexedColors.GREY_25_PERCENT.index)
        style.setFillPattern(FillPatternType.SOLID_FOREGROUND);
        return style;
    }

    void exportCriteriaSheet(XSSFWorkbook workbook) {
        XSSFSheet sheet = workbook.createSheet("Criteria Sheet")
        int rowNumber = 0
        Row row = sheet.createRow(rowNumber++)
        Cell cell = row.createCell(0)
        cell.setCellValue("Criteria Sheet")
        sheet.addMergedRegion(new CellRangeAddress(0, 0, 0, 1));
        cell.setCellStyle(applyColumnHeaderStyle(workbook))
        User user = userService.currentUser
        String generatedBy = user.fullName
        String dateCreated = DateUtil.toDateStringWithTimeInAmPmFormat(user) + DateUtil.getOffsetString(user.preference.timeZone)
        Map<String, String> criteriaSheetData = ["Report Generated By": generatedBy, "Run Date and Time": dateCreated, "Environment": Holders.config.getProperty('grails.serverURL')]
        criteriaSheetData.each { k, v ->
            row = sheet.createRow(rowNumber++)
            cell = row.createCell(0)
            cell.setCellValue(k)
            cell = row.createCell(1)
            cell.setCellValue(v)
            sheet.setColumnWidth(0, 30 * 256)
            sheet.setColumnWidth(1, 30 * 256)
        }
    }
}